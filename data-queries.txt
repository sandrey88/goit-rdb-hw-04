# p1_a
CREATE SCHEMA LibraryManagement;

# p1_b
CREATE TABLE authors (
    author_id INT AUTO_INCREMENT PRIMARY KEY,
    author_name VARCHAR(255) NOT NULL
);

# p1_c
CREATE TABLE genres (
    genre_id INT AUTO_INCREMENT PRIMARY KEY,
    genre_name VARCHAR(255) NOT NULL
);

# p1_d
CREATE TABLE books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    publication_year YEAR NOT NULL,
    author_id INT,
    genre_id INT,
    FOREIGN KEY (author_id) REFERENCES authors(author_id),
    FOREIGN KEY (genre_id) REFERENCES genres(genre_id)
);

# p1_e
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) NOT NULL,
    email VARCHAR(255) NOT NULL
);

# p1_f
CREATE TABLE borrowed_books (
    borrow_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT,
    user_id INT,
    borrow_date DATE NOT NULL,
    return_date DATE,
    FOREIGN KEY (book_id) REFERENCES books(book_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

# p2
INSERT INTO authors (author_name) VALUES 
('Джордж Орвелл'),
('Стівен Кінг');

INSERT INTO genres (genre_name) VALUES 
('Роман-антиутопія'),
('Жахи');

INSERT INTO books (title, publication_year, author_id, genre_id) VALUES 
('1984', 1949, 1, 1),
('Сяйво', 1977, 2, 2);

INSERT INTO users (username, email) VALUES 
('john_doe', 'john.doe@example.com'),
('jane_smith', 'jane.smith@example.com');

INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES 
(1, 1, '2025-02-10', '2025-02-20'),
(2, 2, '2025-02-12', NULL);

# p3
SELECT 
    orders.id AS order_id,
    orders.date AS order_date,
    customers.id AS customer_id,
    customers.name AS customer_name,
    employees.employee_id,
    employees.first_name AS employee_first_name,
    employees.last_name AS employee_last_name,
    shippers.id AS shipper_id,
    shippers.name AS shipper_name,
    order_details.product_id,
    products.name AS product_name,
    categories.id AS category_id,
    categories.name AS category_name,
    suppliers.id AS supplier_id,
    suppliers.name AS supplier_name,
    order_details.quantity,
    products.price AS unit_price
FROM orders
INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN employees ON orders.employee_id = employees.employee_id
INNER JOIN shippers ON orders.shipper_id = shippers.id
INNER JOIN order_details ON orders.id = order_details.order_id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
INNER JOIN suppliers ON products.supplier_id = suppliers.id;

# p4_1
SELECT COUNT(*) AS total_rows
FROM orders
INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN employees ON orders.employee_id = employees.employee_id
INNER JOIN shippers ON orders.shipper_id = shippers.id
INNER JOIN order_details ON orders.id = order_details.order_id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
INNER JOIN suppliers ON products.supplier_id = suppliers.id;

# p4_2
SELECT COUNT(*) AS total_rows
FROM orders
LEFT JOIN customers ON orders.customer_id = customers.id
INNER JOIN employees ON orders.employee_id = employees.employee_id
LEFT JOIN shippers ON orders.shipper_id = shippers.id
INNER JOIN order_details ON orders.id = order_details.order_id
LEFT JOIN products ON order_details.product_id = products.id
LEFT JOIN categories ON products.category_id = categories.id
INNER JOIN suppliers ON products.supplier_id = suppliers.id;

# ВИСНОВОК до p4_2: 

Для заданої бази даних використання INNER JOIN (p4_1) та комбінації INNER JOIN з LEFT JOIN (p4_2) дало однакову кількість рядків (518). Це означає, що всі записи у лівих таблицях мали відповідники у правих таблицях, тому LEFT JOIN не додав додаткових рядків із NULL-значеннями.

Зміна INNER JOIN на LEFT JOIN зазвичай призводить до збільшення кількості рядків, якщо в правій таблиці є записи без відповідників у лівій. Однак у цій базі даних таких "відірваних" записів немає, тому результати залишилися незмінними.

У цьому запиті таблиця orders була обрана як основна, оскільки вона є ключовою у структурі даних:

- Вона містить список замовлень, які є центральною сутністю для аналізу.
- До кожного замовлення можна приєднати клієнта (customers), працівника (employees), доставника (shippers), а також деталі замовлення (order_details).
- Далі через order_details можна отримати товари (products), а від них — категорії (categories) та постачальників (suppliers).
- Це логічний вибір, оскільки кожен запис у orders може бути пов'язаний з кількома іншими таблицями, і саме замовлення є основним об'єктом аналізу в цьому випадку.

# p4_3
SELECT *
FROM orders
INNER JOIN employees ON orders.employee_id = employees.employee_id
WHERE employees.employee_id > 3 AND employees.employee_id <= 10;

# p4_4
SELECT 
    categories.name AS category_name,
    COUNT(*) AS total_orders,
    AVG(order_details.quantity) AS avg_quantity
FROM orders
INNER JOIN order_details ON orders.id = order_details.order_id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
GROUP BY categories.name;

# p4_5
SELECT 
    categories.name AS category_name,
    COUNT(*) AS total_orders,
    AVG(order_details.quantity) AS avg_quantity
FROM orders
INNER JOIN order_details ON orders.id = order_details.order_id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
GROUP BY categories.name
HAVING avg_quantity > 21;

# p4_6
SELECT 
    categories.name AS category_name,
    COUNT(*) AS total_orders,
    AVG(order_details.quantity) AS avg_quantity
FROM orders
INNER JOIN order_details ON orders.id = order_details.order_id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
GROUP BY categories.name
HAVING avg_quantity > 21
ORDER BY total_orders DESC;

# p4_7
SELECT 
    categories.name AS category_name,
    COUNT(*) AS total_orders,
    AVG(order_details.quantity) AS avg_quantity
FROM orders
INNER JOIN order_details ON orders.id = order_details.order_id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
GROUP BY categories.name
HAVING avg_quantity > 21
ORDER BY total_orders DESC
LIMIT 4 OFFSET 1;

